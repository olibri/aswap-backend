// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(P2PDbContext))]
    [Migration("20250622102444_admin")]
    partial class admin
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.DB.AccountEntity", b =>
                {
                    b.Property<string>("WalletAddress")
                        .HasColumnType("text")
                        .HasColumnName("wallet_address");

                    b.Property<DateTime>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC'");

                    b.Property<DateTime?>("LastActiveTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_active_time");

                    b.Property<int?>("OrdersCount")
                        .HasColumnType("integer")
                        .HasColumnName("orders_count");

                    b.Property<string>("Telegram")
                        .HasColumnType("text")
                        .HasColumnName("telegram");

                    b.Property<string>("TelegramId")
                        .HasColumnType("text")
                        .HasColumnName("telegram_chat_id");

                    b.HasKey("WalletAddress");

                    b.ToTable("account");
                });

            modelBuilder.Entity("Domain.Models.DB.EscrowOrderEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool?>("AdminCall")
                        .HasColumnType("boolean")
                        .HasColumnName("admin_call");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("amount");

                    b.Property<string>("BuyerFiat")
                        .HasColumnType("text")
                        .HasColumnName("buyer_fiat");

                    b.Property<DateTime?>("ClosedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("closed_at_utc");

                    b.Property<DateTime>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC'");

                    b.Property<decimal>("DealId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("deal_id");

                    b.Property<string>("EscrowPda")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("escrow_pda");

                    b.Property<string>("FiatCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("fiat_code");

                    b.Property<decimal>("FilledQuantity")
                        .HasColumnType("numeric")
                        .HasColumnName("filled_quantity");

                    b.Property<decimal>("MaxFiatAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("max_fiat_amount");

                    b.Property<decimal>("MinFiatAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("min_fiat_amount");

                    b.Property<byte>("OfferSide")
                        .HasColumnType("smallint")
                        .HasColumnName("offer_side");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("price");

                    b.Property<string>("SellerCrypto")
                        .HasColumnType("text")
                        .HasColumnName("seller_crypto");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("TokenMint")
                        .HasColumnType("text")
                        .HasColumnName("token_mint");

                    b.HasKey("Id");

                    b.ToTable("escrow_orders");
                });

            modelBuilder.Entity("Domain.Models.DB.MessageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("account_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC'");

                    b.Property<decimal>("RoomDealId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("room_id");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("RoomDealId", "CreatedAtUtc");

                    b.ToTable("messages");
                });

            modelBuilder.Entity("Domain.Models.DB.RoomEntity", b =>
                {
                    b.Property<decimal>("DealId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("deal_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC'");

                    b.Property<DateTime>("LastMessageTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_message_time")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC'");

                    b.HasKey("DealId");

                    b.HasIndex("DealId")
                        .IsUnique();

                    b.ToTable("rooms");
                });

            modelBuilder.Entity("Domain.Models.DB.TelegramLinkEntity", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime>("ExpiredAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expired_at")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC' + INTERVAL '1 day'");

                    b.Property<string>("WalletAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("wallet_address");

                    b.HasKey("Code");

                    b.ToTable("telegram_link");
                });

            modelBuilder.Entity("Domain.Models.DB.MessageEntity", b =>
                {
                    b.HasOne("Domain.Models.DB.AccountEntity", "Account")
                        .WithMany("Messages")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.DB.RoomEntity", "Room")
                        .WithMany("Messages")
                        .HasForeignKey("RoomDealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Domain.Models.DB.AccountEntity", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Domain.Models.DB.RoomEntity", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}

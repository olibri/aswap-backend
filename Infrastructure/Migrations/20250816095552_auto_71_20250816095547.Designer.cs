// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(P2PDbContext))]
    [Migration("20250816095552_auto_71_20250816095547")]
    partial class auto_71_20250816095547
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.DB.AccountEntity", b =>
                {
                    b.Property<string>("WalletAddress")
                        .HasColumnType("text")
                        .HasColumnName("wallet_address");

                    b.Property<DateTime>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC'");

                    b.Property<DateTime?>("LastActiveTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_active_time");

                    b.Property<int?>("OrdersCount")
                        .HasColumnType("integer")
                        .HasColumnName("orders_count");

                    b.Property<string>("Telegram")
                        .HasColumnType("text")
                        .HasColumnName("telegram");

                    b.Property<string>("TelegramId")
                        .HasColumnType("text")
                        .HasColumnName("telegram_chat_id");

                    b.HasKey("WalletAddress");

                    b.ToTable("account");
                });

            modelBuilder.Entity("Domain.Models.DB.CoinJellyAccountHistoryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("AmountGet")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("amount_get");

                    b.Property<decimal>("AmountSend")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("amount_send");

                    b.Property<DateTime>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC'");

                    b.Property<string>("CryptoGet")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("crypto_get");

                    b.Property<string>("CryptoSend")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("crypto_send");

                    b.Property<decimal>("FeeAtomic")
                        .HasColumnType("numeric(78,0)")
                        .HasColumnName("fee_atomic");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("TxID")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tx_id");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAtUtc")
                        .HasDatabaseName("ix_cj_hist_created_at");

                    b.HasIndex("TxID")
                        .HasDatabaseName("ix_cj_hist_txid");

                    b.HasIndex("Status", "CreatedAtUtc")
                        .HasDatabaseName("ix_cj_hist_status_date");

                    b.ToTable("coin_jelly_account_history_entity");
                });

            modelBuilder.Entity("Domain.Models.DB.CoinJellyEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CompanyWalletAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("company_wallet_address");

                    b.Property<string>("CryptoCurrency")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("crypto_currency");

                    b.Property<string>("CryptoCurrencyChain")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("crypto_currency_chain");

                    b.HasKey("Id");

                    b.HasIndex("CryptoCurrency", "CryptoCurrencyChain")
                        .IsUnique()
                        .HasDatabaseName("ux_coin_jelly_currency_chain");

                    b.ToTable("coin_jelly");
                });

            modelBuilder.Entity("Domain.Models.DB.Currency.Currency", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("currency_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("code");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("currency");
                });

            modelBuilder.Entity("Domain.Models.DB.EscrowOrderEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool?>("AdminCall")
                        .HasColumnType("boolean")
                        .HasColumnName("admin_call");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("amount");

                    b.Property<string>("BuyerFiat")
                        .HasColumnType("text")
                        .HasColumnName("buyer_fiat");

                    b.Property<DateTime?>("ClosedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("closed_at_utc");

                    b.Property<DateTime>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC'");

                    b.Property<decimal>("DealId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("deal_id");

                    b.Property<string>("EscrowPda")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("escrow_pda");

                    b.Property<int>("EscrowStatus")
                        .HasColumnType("integer")
                        .HasColumnName("escrow_status");

                    b.Property<string>("FiatCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("fiat_code");

                    b.Property<decimal>("FilledQuantity")
                        .HasColumnType("numeric")
                        .HasColumnName("filled_quantity");

                    b.Property<decimal>("MaxFiatAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("max_fiat_amount");

                    b.Property<decimal>("MinFiatAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("min_fiat_amount");

                    b.Property<byte>("OfferSide")
                        .HasColumnType("smallint")
                        .HasColumnName("offer_side");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("price");

                    b.Property<string>("SellerCrypto")
                        .HasColumnType("text")
                        .HasColumnName("seller_crypto");

                    b.Property<string>("TokenMint")
                        .HasColumnType("text")
                        .HasColumnName("token_mint");

                    b.HasKey("Id");

                    b.HasIndex("TokenMint", "FiatCode", "OfferSide", "EscrowStatus", "Price")
                        .HasDatabaseName("ix_escrow_best_price");

                    b.ToTable("escrow_orders");
                });

            modelBuilder.Entity("Domain.Models.DB.EscrowOrderPaymentMethodEntity", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<short>("MethodId")
                        .HasColumnType("smallint")
                        .HasColumnName("method_id");

                    b.HasKey("OrderId", "MethodId");

                    b.HasIndex("MethodId", "OrderId");

                    b.ToTable("escrow_order_payment_methods");
                });

            modelBuilder.Entity("Domain.Models.DB.MessageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("account_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC'");

                    b.Property<decimal>("RoomDealId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("room_id");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("RoomDealId", "CreatedAtUtc");

                    b.ToTable("messages");
                });

            modelBuilder.Entity("Domain.Models.DB.Metrics.AggregatorState", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.Property<DateTime>("Value")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("value");

                    b.HasKey("Key");

                    b.ToTable("aggregator_state");
                });

            modelBuilder.Entity("Domain.Models.DB.Metrics.AssetVolumeDailyEntity", b =>
                {
                    b.Property<DateTime>("Day")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("day");

                    b.Property<string>("TokenMint")
                        .HasColumnType("text")
                        .HasColumnName("token_mint");

                    b.Property<decimal>("Volume")
                        .HasColumnType("numeric(38,0)")
                        .HasColumnName("volume");

                    b.HasKey("Day", "TokenMint");

                    b.ToTable("asset_volume_daily");
                });

            modelBuilder.Entity("Domain.Models.DB.Metrics.BanEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("BannedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("banned_at");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<DateTime?>("Until")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("until");

                    b.Property<string>("Wallet")
                        .HasColumnType("text")
                        .HasColumnName("wallet");

                    b.HasKey("Id");

                    b.ToTable("bans");
                });

            modelBuilder.Entity("Domain.Models.DB.Metrics.DealTimeDailyEntity", b =>
                {
                    b.Property<DateTime>("Day")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TokenMint")
                        .HasColumnType("text");

                    b.Property<double>("AvgSeconds")
                        .HasColumnType("double precision");

                    b.Property<int>("TradeCnt")
                        .HasColumnType("integer");

                    b.HasKey("Day", "TokenMint");

                    b.ToTable("deal_time_daily");
                });

            modelBuilder.Entity("Domain.Models.DB.Metrics.EventEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("event_type");

                    b.Property<string>("Ip")
                        .HasColumnType("text")
                        .HasColumnName("ip");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("payload");

                    b.Property<DateTime>("Ts")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ts");

                    b.Property<string>("Wallet")
                        .HasColumnType("text")
                        .HasColumnName("wallet");

                    b.HasKey("Id");

                    b.ToTable("events");
                });

            modelBuilder.Entity("Domain.Models.DB.Metrics.FunnelMetricsDailyEntity", b =>
                {
                    b.Property<DateTime>("Day")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("day");

                    b.Property<int>("ConnectsCnt")
                        .HasColumnType("integer")
                        .HasColumnName("connects_cnt");

                    b.Property<int>("OrdersCnt")
                        .HasColumnType("integer")
                        .HasColumnName("orders_cnt");

                    b.Property<int>("TradesCnt")
                        .HasColumnType("integer")
                        .HasColumnName("trades_cnt");

                    b.HasKey("Day");

                    b.ToTable("funnel_metrics_daily");
                });

            modelBuilder.Entity("Domain.Models.DB.Metrics.OrderCreatedDailyEntity", b =>
                {
                    b.Property<DateTime>("Day")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("day");

                    b.Property<byte>("Side")
                        .HasColumnType("smallint")
                        .HasColumnName("side");

                    b.Property<int>("CreatedCnt")
                        .HasColumnType("integer")
                        .HasColumnName("created_cnt");

                    b.HasKey("Day", "Side");

                    b.HasIndex("Day");

                    b.HasIndex("Side");

                    b.ToTable("order_created_daily");
                });

            modelBuilder.Entity("Domain.Models.DB.Metrics.OrderStatusDailyEntity", b =>
                {
                    b.Property<DateTime>("Day")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("day");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("Cnt")
                        .HasColumnType("integer")
                        .HasColumnName("cnt");

                    b.HasKey("Day", "Status");

                    b.ToTable("order_status_daily");
                });

            modelBuilder.Entity("Domain.Models.DB.Metrics.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("OccurredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_at");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("payload");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_at");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("ProcessedAt");

                    b.ToTable("outbox_messages");
                });

            modelBuilder.Entity("Domain.Models.DB.Metrics.RatingReviewEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<decimal?>("DealId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("deal_id");

                    b.Property<string>("FromWallet")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("from_wallet");

                    b.Property<decimal>("Score")
                        .HasColumnType("numeric(3,2)")
                        .HasColumnName("score");

                    b.Property<string>("ToWallet")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("to_wallet");

                    b.HasKey("Id");

                    b.ToTable("rating_reviews");
                });

            modelBuilder.Entity("Domain.Models.DB.Metrics.SessionEntity", b =>
                {
                    b.Property<Guid>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("session_id");

                    b.Property<string>("Ip")
                        .HasColumnType("text")
                        .HasColumnName("ip");

                    b.Property<DateTime>("LastSeenAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_seen_at");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.Property<string>("Wallet")
                        .HasColumnType("text")
                        .HasColumnName("wallet");

                    b.HasKey("SessionId");

                    b.HasIndex("LastSeenAt");

                    b.ToTable("sessions");
                });

            modelBuilder.Entity("Domain.Models.DB.Metrics.TvlSnapshotEntity", b =>
                {
                    b.Property<DateTime>("TakenAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("taken_at");

                    b.Property<string>("TokenMint")
                        .HasColumnType("text")
                        .HasColumnName("token_mint");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric(38,0)")
                        .HasColumnName("balance");

                    b.HasKey("TakenAt", "TokenMint");

                    b.ToTable("tvl_snapshots");
                });

            modelBuilder.Entity("Domain.Models.DB.Metrics.TxHistoryEntity", b =>
                {
                    b.Property<string>("TxHash")
                        .HasColumnType("text")
                        .HasColumnName("tx_hash");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(38,0)")
                        .HasColumnName("amount");

                    b.Property<string>("Counterparty")
                        .HasColumnType("text")
                        .HasColumnName("counterparty_wallet");

                    b.Property<string>("Side")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("side");

                    b.Property<string>("TokenMint")
                        .HasColumnType("text")
                        .HasColumnName("token_mint");

                    b.Property<DateTime>("Ts")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ts");

                    b.Property<string>("Wallet")
                        .HasColumnType("text")
                        .HasColumnName("wallet");

                    b.HasKey("TxHash");

                    b.ToTable("tx_history");
                });

            modelBuilder.Entity("Domain.Models.DB.Metrics.UserMetricsDailyEntity", b =>
                {
                    b.Property<DateTime>("Day")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("day");

                    b.Property<int>("DauIps")
                        .HasColumnType("integer")
                        .HasColumnName("dau_ips");

                    b.Property<int>("DauUsers")
                        .HasColumnType("integer")
                        .HasColumnName("dau_users");

                    b.Property<int>("MauUsers")
                        .HasColumnType("integer")
                        .HasColumnName("mau_users");

                    b.Property<int>("WauUsers")
                        .HasColumnType("integer")
                        .HasColumnName("wau_users");

                    b.HasKey("Day");

                    b.ToTable("user_metrics_daily");
                });

            modelBuilder.Entity("Domain.Models.DB.PaymentMethod.PaymentCategory", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("category_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("payment_categories");
                });

            modelBuilder.Entity("Domain.Models.DB.PaymentMethod.PaymentMethod", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("method_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<short>("CategoryId")
                        .HasColumnType("smallint")
                        .HasColumnName("category_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("code");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("payment_methods");
                });

            modelBuilder.Entity("Domain.Models.DB.PaymentMethod.PaymentPopularityDaily", b =>
                {
                    b.Property<DateOnly>("Day")
                        .HasColumnType("date")
                        .HasColumnName("day");

                    b.Property<short>("MethodId")
                        .HasColumnType("smallint")
                        .HasColumnName("method_id");

                    b.Property<string>("Region")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("region");

                    b.Property<int>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("cnt");

                    b.HasKey("Day", "MethodId", "Region");

                    b.HasIndex("Region", "Day", "Count");

                    b.ToTable("payment_popularity_daily");
                });

            modelBuilder.Entity("Domain.Models.DB.RefreshTokenEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<DateTime>("ExpiresAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at_utc");

                    b.Property<string>("Ip")
                        .HasColumnType("text")
                        .HasColumnName("ip");

                    b.Property<string>("RefreshHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("refresh_hash");

                    b.Property<DateTime?>("RevokedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("revoked_at_utc");

                    b.Property<string>("UserAgent")
                        .HasColumnType("text")
                        .HasColumnName("ua");

                    b.Property<string>("Wallet")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("wallet");

                    b.HasKey("Id");

                    b.ToTable("auth_refresh");
                });

            modelBuilder.Entity("Domain.Models.DB.RoomEntity", b =>
                {
                    b.Property<decimal>("DealId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("deal_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC'");

                    b.Property<DateTime>("LastMessageTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_message_time")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC'");

                    b.HasKey("DealId");

                    b.HasIndex("DealId")
                        .IsUnique();

                    b.ToTable("rooms");
                });

            modelBuilder.Entity("Domain.Models.DB.TelegramLinkEntity", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime>("ExpiredAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expired_at")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC' + INTERVAL '1 day'");

                    b.Property<string>("WalletAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("wallet_address");

                    b.HasKey("Code");

                    b.ToTable("telegram_link");
                });

            modelBuilder.Entity("Domain.Models.DB.EscrowOrderPaymentMethodEntity", b =>
                {
                    b.HasOne("Domain.Models.DB.PaymentMethod.PaymentMethod", "Method")
                        .WithMany()
                        .HasForeignKey("MethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.DB.EscrowOrderEntity", "Order")
                        .WithMany("PaymentMethods")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Method");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Domain.Models.DB.MessageEntity", b =>
                {
                    b.HasOne("Domain.Models.DB.AccountEntity", "Account")
                        .WithMany("Messages")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.DB.RoomEntity", "Room")
                        .WithMany("Messages")
                        .HasForeignKey("RoomDealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Domain.Models.DB.PaymentMethod.PaymentMethod", b =>
                {
                    b.HasOne("Domain.Models.DB.PaymentMethod.PaymentCategory", "Category")
                        .WithMany("Methods")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Domain.Models.DB.AccountEntity", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Domain.Models.DB.EscrowOrderEntity", b =>
                {
                    b.Navigation("PaymentMethods");
                });

            modelBuilder.Entity("Domain.Models.DB.PaymentMethod.PaymentCategory", b =>
                {
                    b.Navigation("Methods");
                });

            modelBuilder.Entity("Domain.Models.DB.RoomEntity", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
